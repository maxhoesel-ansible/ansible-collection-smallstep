version: 2.1

orbs:
  collection-testing: maxhoesel-ansible/ansible-collection-testing@0.5.3

filters: &semver-tagged
  tags:
    # Official Semver Regex. Yes, it's LOOOONG
    only: /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  branches:
    ignore: /.*/

executors:
  pytest:
    machine:
      image: ubuntu-2204:2024.08.1 # python 3.12, supports ansible 2.16+2.17
    resource_class: large

jobs:
  test:
    parameters:
      parallelism:
        description: Number of parallel runners
        type: integer
      ansible-python-version-tuple:
        description: Comma-separated version tuple containing Ansible and node python version to use
        type: string
      step-version-tuple:
        type: string
        description: Comma separated version of step-cli+step-ca version to use for test
    executor: pytest
    parallelism: << parameters.parallelism >>
    steps:
      - run:
          name: Split version tuples
          command: |
            export ANSIBLE_VERSION_STRING=$(echo "<< parameters.ansible-python-version-tuple >>" | cut -d ',' -f 1)
            export PYTHON_VERSION_STRING=$(echo "<< parameters.ansible-python-version-tuple >>" | cut -d ',' -f 2)
            echo export ANSIBLE_VERSION="$ANSIBLE_VERSION_STRING" >> "$BASH_ENV"
            echo export PYTHON_VERSION="$PYTHON_VERSION_STRING" >> "$BASH_ENV"

            export STEP_CLI_VERSION_STRING=$(echo "<< parameters.step-version-tuple >>" | cut -d ',' -f 1)
            export STEP_CA_VERSION_STRING=$(echo "<< parameters.step-version-tuple >>" | cut -d ',' -f 2)
            echo export STEP_CLI_VERSION="$STEP_CLI_VERSION_STRING" >> "$BASH_ENV"
            echo export STEP_CA_VERSION="$STEP_CA_VERSION_STRING" >> "$BASH_ENV"
      - collection-testing/pytest:
          pytest-args: >
            --ci
            --ansible-version "$ANSIBLE_VERSION"
            --step-cli-version "$STEP_CLI_VERSION"
            --step-ca-version "$STEP_CA_VERSION"
            --node-python-version "$PYTHON_VERSION"

workflows:
  ci:
    jobs:
      - test:
          name: Test (ansible-<< matrix.ansible-python-version-tuple >>, step-<< matrix.step-version-tuple >>)
          parallelism: 3
          matrix:
            parameters:
              ansible-python-version-tuple: ["2.18,3.8", "2.19,3.8"]
              step-version-tuple: ["latest,latest", "0.24.0,0.24.0"]
      - collection-testing/pre-commit-lint:
          name: Lint
      - collection-testing/antsibull-docs:
          name: Generate Docs
      - collection-testing/publish-github:
          name: Publish Release to GitHub
          context: collection-publishing
          filters: *semver-tagged
      - collection-testing/publish-galaxy:
          name: Publish to Galaxy
          context: collection-publishing
          filters: *semver-tagged
