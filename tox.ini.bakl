[consts]
target_min_python = 3.6
step_ca_version = 0.24.1
step_cli_version = 0.24.3

[tox]
# Module tests: run module tests with these ansible versions
envlist = py3-ansible{213,214,215}-modules-{sanity,integration,units}
requires =
    tox-ansible>=1.8,<2
    tox<4
skipsdist = True

[ansible]
# Role tests config: we test roles with these ansible/py versions
ansible = 213,214,215
python = 3
scenario_format = $parent-$nondefault_name

[testenv]
passenv =
    HOME
setenv =
    # Make testing versions available to everyone
    STEP_CLI_VERSION = {[consts]step_cli_version}
    STEP_CA_VERSION = {[consts]step_ca_version}
    # Visualization
    PY_COLORS = 1
    ANSIBLE_FORCE_COLOR = 1
    # Enable podman for ansible-test instead of docker
    ANSIBLE_TEST_PREFER_PODMAN = 1
deps =
    ansible213: ansible-core>=2.13,<2.14
    ansible214: ansible-core>=2.14,<2.15
    ansible215: ansible-core>=2.15,<2.16

[testenv:py3-ansible{213,214,215}-modules-units]
commands =
    ansible-test units --docker --color -v \
        --python {[consts]target_min_python}

[testenv:py3-ansible{213,214,215}-modules-sanity]
whitelist_externals =
    mkdir
    bash
commands =
    ansible-galaxy collection build -vf --output-path dist/
    bash -c 'ansible-galaxy collection install -f dist/*.tar.gz'
    # As we only support py36+, pyupgrade is set to remove the py27 boilerplate.
    # Don't check for that as we don't need it.
    bash -c 'cd $HOME/.ansible/collections/ansible_collections/maxhoesel/smallstep && ansible-test sanity --docker --color -v \
        --python {[consts]target_min_python} \
        --skip-test metaclass-boilerplate --skip-test future-import-boilerplate'

[testenv:py3-ansible{213,214,215}-modules-integration]
setenv =
    # Remote CA settings
    STEP_REMOTE_CA_PROVISIONER_NAME = ansible
    STEP_REMOTE_CA_PROVISIONER_PASSWORD = ansible-module-tests-pw
    STEP_REMOTE_CA_URL = https://step-ansible-remote-ca:9000
    # Local CA settings
    STEP_LOCAL_CA_USER = step
    STEP_LOCAL_CLI_BINARY = step
    STEP_LOCAL_STEPPATH = /home/step # hardcoded in the local-ca Dockerfile
commands =
    podman network create step-ansible-modules
    # Build the local-ca container image
    podman build --cgroup-manager=cgroupfs tests/integration/docker/local-ca -t step-ansible-local-ca \
        --build-arg STEP_CA_VERSION=$STEP_CA_VERSION \
        --build-arg PYTHON_VERSION={[consts]target_min_python} \
        --build-arg STEP_CA_USER=$STEP_LOCAL_CA_USER
    # Render out the config so that the test scenarios know how to contact it...
    tests/integration/render_config.sh \
        tests/integration/integration_config.yml.template > tests/integration/integration_config.yml
    # ... and run the local-ca tests
    ansible-test integration ---color -v \
        --controller docker:default --target docker:step-ansible-local-ca,python={[consts]target_min_python}@/usr/local/bin/python3 \
        --docker-network step-ansible-modules
        --tags local-ca # only run local tests

    # now for the remote-ca tests. We need a CA up and running for this
    podman run --cgroup-manager=cgroupfs -d \
        --name step-ansible-remote-ca --network step-ansible-modules \
        -e "DOCKER_STEPCA_INIT_NAME=Ansible-Test" \
        -e "DOCKER_STEPCA_INIT_DNS_NAMES=localhost,step-ansible-remote-ca" \
        -e "DOCKER_STEPCA_INIT_PROVISIONER_NAME=$STEP_REMOTE_CA_PROVISIONER_NAME" \
        -e "DOCKER_STEPCA_INIT_PASSWORD=$STEP_REMOTE_CA_PROVISIONER_PASSWORD" \
        "docker.io/smallstep/step-ca:$STEP_CA_VERSION"
    bash -c "while ! podman exec step-ansible-remote-ca step ca health &> /dev/null; echo "Waiting for remote CA" && do sleep 1; done"
    # Render out the config with the CA fingerprint so that the test scenarios know how to contact it...
    STEP_REMOTE_CA_FP=$(podman exec step-ansible-remote-ca step certificate fingerprint certs/root_ca.crt) tests/integration/render_config.sh \
        tests/integration/integration_config.yml.template > tests/integration/integration_config.yml
    # ... and run the remote-ca tests
    ansible-test integration ---color -v \
        --controller docker:default --target docker:default,python={[consts]target_min_python} \
        --docker-network step-ansible-modules
        --skip-tags local-ca # don't run local tests

    # Cleanup
    podman rm -f step-ansible-remote-ca
    podman network rm step-ansible-modules
