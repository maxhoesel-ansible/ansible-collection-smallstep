---
name: CI
on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types:
      - published
      - created
  schedule:
    - cron: "0 4 * * 1,4"

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0

  modules-sanity:
    name: "Modules Sanity"
    runs-on: ubuntu-latest
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run sanity tests
        run: tests/test-modules-sanity

  modules-integration:
    needs: modules-sanity
    name: "Modules Integration"
    runs-on: ubuntu-latest
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run integration tests
        run: tests/test-modules-integration

  discover-scenarios:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.set-scenarios.outputs.scenarios }}
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Initialize tox
        run: tox -l

      - name: Discover scenarios
        id: set-scenarios
        # Convert the tox scenario listing into a JSON/YAML list, filtering out any non-molecule/lint scenarios
        run: |
          export scenarios="[`for l in $(tox -l); do echo "'$l'"; done | grep ansible | grep -v "lint" | tr '\n' ',' | sed '$s/,$//'`]"
          echo "::set-output name=scenarios::$scenarios"

  roles:
    name: "${{ matrix.role }}"
    runs-on: ubuntu-latest
    needs: discover-scenarios
    strategy:
      fail-fast: false
      matrix:
        role: ${{ fromJson(needs.discover-scenarios.outputs.scenarios) }}
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Initialize tox
        run: tox -l
      - name: Run role tests
        run: tests/test-roles ${{ matrix.role }}

  publish:
    name: "Publish to Ansible Galaxy"
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - lint
      - roles
      - modules-integration
    steps:
      - name: Check out codebase
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3"
      - name: Set up pip and install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Build collection and get tarball filename
        id: collection_build
        run: |
          ansible-galaxy collection build --force
          echo "::set-output name=collection-tarball::$(ls | grep ".tar.gz")"

      - name: Get current release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload collection release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.collection_build.outputs.collection-tarball }}
          asset_name: ${{ github.event.repository.name }}-${{ steps.get_release.outputs.tag_name }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Deploy Ansible collection to Galaxy
        run: ansible-galaxy collection publish ${{ steps.collection_build.outputs.collection-tarball }} --api-key ${{ secrets.GALAXY_API_KEY }}
